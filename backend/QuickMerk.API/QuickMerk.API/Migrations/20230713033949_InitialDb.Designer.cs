// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickMerk.Infraestructure.Context;

#nullable disable

namespace QuickMerk.API.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230713033949_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Busquedas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("busquedas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("busquedas");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("contrasena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipo_CuentaId")
                        .HasColumnType("int");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tipo_CuentaId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("cuentas");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("tipo_DocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("tipo_Documento_Id")
                        .HasColumnType("int");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tipo_DocumentoId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("documentos");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Tipo_cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("tipo_cuenta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tipo_Cuentas");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Tipo_documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TipoDeDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tipo_Documentos");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Busquedas", b =>
                {
                    b.HasOne("QuickMerk.Domain.Entitys.Usuario", "usuario")
                        .WithMany("Busquedas")
                        .HasForeignKey("usuarioId");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Cuenta", b =>
                {
                    b.HasOne("QuickMerk.Domain.Entitys.Tipo_cuenta", "tipo_Cuenta")
                        .WithMany("cuentas")
                        .HasForeignKey("tipo_CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickMerk.Domain.Entitys.Usuario", "usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("QuickMerk.Domain.Entitys.Cuenta", "usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipo_Cuenta");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Documento", b =>
                {
                    b.HasOne("QuickMerk.Domain.Entitys.Tipo_documento", "tipo_Documento")
                        .WithMany("documentos")
                        .HasForeignKey("tipo_DocumentoId");

                    b.HasOne("QuickMerk.Domain.Entitys.Usuario", "usuario")
                        .WithOne("Documento")
                        .HasForeignKey("QuickMerk.Domain.Entitys.Documento", "usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipo_Documento");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Tipo_cuenta", b =>
                {
                    b.Navigation("cuentas");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Tipo_documento", b =>
                {
                    b.Navigation("documentos");
                });

            modelBuilder.Entity("QuickMerk.Domain.Entitys.Usuario", b =>
                {
                    b.Navigation("Busquedas");

                    b.Navigation("Cuenta");

                    b.Navigation("Documento");
                });
#pragma warning restore 612, 618
        }
    }
}
